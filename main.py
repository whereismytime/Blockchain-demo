# FastAPI interface for the blockchain
# FastAPI-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ –±–ª–æ–∫—á–µ–π–Ω—É

from fastapi import FastAPI, HTTPException, Body
from blockchain import Blockchain

app = FastAPI(title="Simple Blockchain API")
bc = Blockchain()

@app.get("/")
def home():
    """Root endpoint / –ö–æ—Ä–µ–Ω–µ–≤–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç"""
    return {"message": "Blockchain API is running üß±"}

@app.post("/mine_block")
def mine_block(data: str = Body(..., embed=True)):
    """Mine a block with given data / –ú–∞–π–Ω–∏–º–æ –±–ª–æ–∫ —ñ–∑ –¥–∞–Ω–∏–º–∏"""
    block = bc.mine_block(data)
    return {"message": "Block mined successfully", "block": block}

@app.get("/blockchain")
def get_blockchain():
    """Return the full blockchain if valid / –ü–æ–≤–µ—Ä—Ç–∞—î –≤–µ—Å—å –±–ª–æ–∫—á–µ–π–Ω (—è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π)"""
    if not bc.is_chain_valid():
        raise HTTPException(status_code=400, detail="The blockchain is invalid")
    return {"length": len(bc.get_chain()), "chain": bc.get_chain()}

@app.get("/blockchain/last")
def previous_block():
    """Get the last block in chain / –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–ª–æ–∫ —É –ª–∞–Ω—Ü—é–≥—É"""
    if not bc.is_chain_valid():
        raise HTTPException(status_code=400, detail="The blockchain is invalid")
    return bc.get_previous_block()

@app.get("/validate")
def is_blockchain_valid():
    """Check chain integrity / –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –±–ª–æ–∫—á–µ–π–Ω—É"""
    return {"is_valid": bc.is_chain_valid()}
